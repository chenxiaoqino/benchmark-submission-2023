(set-info :smt-lib-version 2.6)
(set-logic QF_BV)
(set-info :source |
Generated by: Xiaoqi Chen
Generated on: 2022-12-14
Generator: P4DFA
Application: Synthesize an isomorphic mapping for executing state machine transitions using hardware arithmetic circuits in programmable switches.
Target Solver: z3
Publications: Synthesizing State Machines for Data Planes (SOSR2022, doi:10.1145/3563647.3563650)
Input DFA: a simple 3-state DFA
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)


(declare-fun pred_const_0_0 () (_ BitVec 8))
(declare-fun pred_const_0_1 () (_ BitVec 8))
(declare-fun arith_sym_const_0_0 () (_ BitVec 8))
(declare-fun arith_state_const_0_0 () (_ BitVec 8))
(declare-fun arith_sym_const_0_1 () (_ BitVec 8))
(declare-fun arith_state_const_0_1 () (_ BitVec 8))
(declare-fun state_1_is_main_0 () Bool)
(declare-fun state_1_a_0 () (_ BitVec 8))
(declare-fun state_1_b_0 () (_ BitVec 8))
(declare-fun state_1_c_0 () (_ BitVec 8))
(declare-fun pred_state_opt_0_0_0 () Bool)
(declare-fun sym_2_x () (_ BitVec 8))
(declare-fun sym_1_x () (_ BitVec 8))
(declare-fun pred_sym_opt_0_0_1 () Bool)
(declare-fun pred_sym_opt_0_0_0 () Bool)
(declare-fun pred_op_0_0_1 () Bool)
(declare-fun pred_op_0_0_0 () Bool)
(declare-fun pred_val_0_0_a_0_x_a () Bool)
(declare-fun pred_state_opt_0_1_0 () Bool)
(declare-fun pred_sym_opt_0_1_1 () Bool)
(declare-fun pred_sym_opt_0_1_0 () Bool)
(declare-fun pred_op_0_1_1 () Bool)
(declare-fun pred_op_0_1_0 () Bool)
(declare-fun pred_val_0_1_a_0_x_a () Bool)
(declare-fun logic_op_0_0_1 () Bool)
(declare-fun logic_op_0_0_0 () Bool)
(declare-fun logic_val_0_0_a_0_x_a () Bool)
(declare-fun arith_state_opt_0_0_0 () Bool)
(declare-fun arith_sym_opt_0_0_1 () Bool)
(declare-fun arith_sym_opt_0_0_0 () Bool)
(declare-fun arith_val_0_0_a_0_x_a () (_ BitVec 8))
(declare-fun arith_state_opt_0_1_0 () Bool)
(declare-fun arith_sym_opt_0_1_1 () Bool)
(declare-fun arith_sym_opt_0_1_0 () Bool)
(declare-fun arith_val_0_1_a_0_x_a () (_ BitVec 8))
(declare-fun sym_2_y () (_ BitVec 8))
(declare-fun sym_1_y () (_ BitVec 8))
(declare-fun pred_val_0_0_a_0_y_b () Bool)
(declare-fun pred_val_0_1_a_0_y_b () Bool)
(declare-fun logic_val_0_0_a_0_y_b () Bool)
(declare-fun arith_val_0_0_a_0_y_b () (_ BitVec 8))
(declare-fun arith_val_0_1_a_0_y_b () (_ BitVec 8))
(declare-fun sym_2_z () (_ BitVec 8))
(declare-fun sym_1_z () (_ BitVec 8))
(declare-fun pred_val_0_0_a_0_z_c () Bool)
(declare-fun pred_val_0_1_a_0_z_c () Bool)
(declare-fun logic_val_0_0_a_0_z_c () Bool)
(declare-fun arith_val_0_0_a_0_z_c () (_ BitVec 8))
(declare-fun arith_val_0_1_a_0_z_c () (_ BitVec 8))
(declare-fun pred_val_0_0_b_0_x_a () Bool)
(declare-fun pred_val_0_1_b_0_x_a () Bool)
(declare-fun logic_val_0_0_b_0_x_a () Bool)
(declare-fun arith_val_0_0_b_0_x_a () (_ BitVec 8))
(declare-fun arith_val_0_1_b_0_x_a () (_ BitVec 8))
(declare-fun pred_val_0_0_b_0_y_b () Bool)
(declare-fun pred_val_0_1_b_0_y_b () Bool)
(declare-fun logic_val_0_0_b_0_y_b () Bool)
(declare-fun arith_val_0_0_b_0_y_b () (_ BitVec 8))
(declare-fun arith_val_0_1_b_0_y_b () (_ BitVec 8))
(declare-fun pred_val_0_0_b_0_z_c () Bool)
(declare-fun pred_val_0_1_b_0_z_c () Bool)
(declare-fun logic_val_0_0_b_0_z_c () Bool)
(declare-fun arith_val_0_0_b_0_z_c () (_ BitVec 8))
(declare-fun arith_val_0_1_b_0_z_c () (_ BitVec 8))
(declare-fun pred_val_0_0_c_0_x_a () Bool)
(declare-fun pred_val_0_1_c_0_x_a () Bool)
(declare-fun logic_val_0_0_c_0_x_a () Bool)
(declare-fun arith_val_0_0_c_0_x_a () (_ BitVec 8))
(declare-fun arith_val_0_1_c_0_x_a () (_ BitVec 8))
(declare-fun pred_val_0_0_c_0_y_b () Bool)
(declare-fun pred_val_0_1_c_0_y_b () Bool)
(declare-fun logic_val_0_0_c_0_y_b () Bool)
(declare-fun arith_val_0_0_c_0_y_b () (_ BitVec 8))
(declare-fun arith_val_0_1_c_0_y_b () (_ BitVec 8))
(declare-fun pred_val_0_0_c_0_z_c () Bool)
(declare-fun pred_val_0_1_c_0_z_c () Bool)
(declare-fun logic_val_0_0_c_0_z_c () Bool)
(declare-fun arith_val_0_0_c_0_z_c () (_ BitVec 8))
(declare-fun arith_val_0_1_c_0_z_c () (_ BitVec 8))
(assert
 (bvsge pred_const_0_0 (_ bv0 8)))
(assert
 (bvsle pred_const_0_0 (_ bv7 8)))
(assert
 (bvsge pred_const_0_1 (_ bv0 8)))
(assert
 (bvsle pred_const_0_1 (_ bv7 8)))
(assert
 (bvsge arith_sym_const_0_0 (_ bv0 8)))
(assert
 (bvsle arith_sym_const_0_0 (_ bv7 8)))
(assert
 (bvsge arith_state_const_0_0 (_ bv0 8)))
(assert
 (bvsle arith_state_const_0_0 (_ bv7 8)))
(assert
 (bvsge arith_sym_const_0_1 (_ bv0 8)))
(assert
 (bvsle arith_sym_const_0_1 (_ bv7 8)))
(assert
 (bvsge arith_state_const_0_1 (_ bv0 8)))
(assert
 (bvsle arith_state_const_0_1 (_ bv7 8)))
(assert
 state_1_is_main_0)
(assert
 (= (_ bv0 8) state_1_a_0))
(assert
 (and (distinct state_1_b_0 state_1_a_0) true))
(assert
 (and (distinct state_1_b_0 state_1_c_0) true))
(assert
 (and (distinct state_1_a_0 state_1_c_0) true))
(assert
 (let ((?x46 (ite pred_state_opt_0_0_0 (_ bv0 8) state_1_a_0)))
 (let ((?x44 (ite pred_sym_opt_0_0_0 (_ bv0 8) (ite pred_sym_opt_0_0_1 sym_1_x sym_2_x))))
 (let ((?x48 (bvadd (bvadd ?x44 ?x46) pred_const_0_0)))
 (let (($x57 (ite pred_op_0_0_0 (ite pred_op_0_0_1 (= ?x48 (_ bv0 8)) (bvsge ?x48 (_ bv0 8))) (ite pred_op_0_0_1 (bvsle ?x48 (_ bv0 8)) (and (distinct ?x48 (_ bv0 8)) true)))))
 (= pred_val_0_0_a_0_x_a $x57))))))
(assert
 (let ((?x63 (ite pred_state_opt_0_1_0 (_ bv0 8) state_1_a_0)))
 (let ((?x61 (ite pred_sym_opt_0_1_0 (_ bv0 8) (ite pred_sym_opt_0_1_1 sym_1_x sym_2_x))))
 (let ((?x65 (bvadd (bvadd ?x61 ?x63) pred_const_0_1)))
 (let (($x74 (ite pred_op_0_1_0 (ite pred_op_0_1_1 (= ?x65 (_ bv0 8)) (bvsge ?x65 (_ bv0 8))) (ite pred_op_0_1_1 (bvsle ?x65 (_ bv0 8)) (and (distinct ?x65 (_ bv0 8)) true)))))
 (= pred_val_0_1_a_0_x_a $x74))))))
(assert
 (let (($x82 (ite logic_op_0_0_1 (and pred_val_0_0_a_0_x_a pred_val_0_1_a_0_x_a) (or pred_val_0_0_a_0_x_a pred_val_0_1_a_0_x_a))))
 (= logic_val_0_0_a_0_x_a (ite logic_op_0_0_0 pred_val_0_0_a_0_x_a $x82))))
(assert
 (let ((?x92 (ite arith_state_opt_0_0_0 arith_state_const_0_0 state_1_a_0)))
 (let ((?x90 (ite arith_sym_opt_0_0_0 arith_sym_const_0_0 (ite arith_sym_opt_0_0_1 sym_1_x sym_2_x))))
 (= arith_val_0_0_a_0_x_a (bvadd ?x90 ?x92)))))
(assert
 (let ((?x98 (ite arith_state_opt_0_1_0 arith_state_const_0_1 state_1_a_0)))
 (let ((?x95 (ite arith_sym_opt_0_1_0 arith_sym_const_0_1 (ite arith_sym_opt_0_1_1 sym_1_x sym_2_x))))
 (= arith_val_0_1_a_0_x_a (bvadd ?x95 ?x98)))))
(assert
 (= state_1_a_0 (ite logic_val_0_0_a_0_x_a arith_val_0_0_a_0_x_a arith_val_0_1_a_0_x_a)))
(assert
 (let ((?x46 (ite pred_state_opt_0_0_0 (_ bv0 8) state_1_a_0)))
 (let ((?x106 (ite pred_sym_opt_0_0_0 (_ bv0 8) (ite pred_sym_opt_0_0_1 sym_1_y sym_2_y))))
 (let ((?x109 (bvadd (bvadd ?x106 ?x46) pred_const_0_0)))
 (let (($x117 (ite pred_op_0_0_0 (ite pred_op_0_0_1 (= ?x109 (_ bv0 8)) (bvsge ?x109 (_ bv0 8))) (ite pred_op_0_0_1 (bvsle ?x109 (_ bv0 8)) (and (distinct ?x109 (_ bv0 8)) true)))))
 (= pred_val_0_0_a_0_y_b $x117))))))
(assert
 (let ((?x63 (ite pred_state_opt_0_1_0 (_ bv0 8) state_1_a_0)))
 (let ((?x119 (ite pred_sym_opt_0_1_0 (_ bv0 8) (ite pred_sym_opt_0_1_1 sym_1_y sym_2_y))))
 (let ((?x121 (bvadd (bvadd ?x119 ?x63) pred_const_0_1)))
 (let (($x128 (ite pred_op_0_1_0 (ite pred_op_0_1_1 (= ?x121 (_ bv0 8)) (bvsge ?x121 (_ bv0 8))) (ite pred_op_0_1_1 (bvsle ?x121 (_ bv0 8)) (and (distinct ?x121 (_ bv0 8)) true)))))
 (= pred_val_0_1_a_0_y_b $x128))))))
(assert
 (let (($x134 (ite logic_op_0_0_1 (and pred_val_0_0_a_0_y_b pred_val_0_1_a_0_y_b) (or pred_val_0_0_a_0_y_b pred_val_0_1_a_0_y_b))))
 (= logic_val_0_0_a_0_y_b (ite logic_op_0_0_0 pred_val_0_0_a_0_y_b $x134))))
(assert
 (let ((?x92 (ite arith_state_opt_0_0_0 arith_state_const_0_0 state_1_a_0)))
 (let ((?x140 (ite arith_sym_opt_0_0_0 arith_sym_const_0_0 (ite arith_sym_opt_0_0_1 sym_1_y sym_2_y))))
 (= arith_val_0_0_a_0_y_b (bvadd ?x140 ?x92)))))
(assert
 (let ((?x98 (ite arith_state_opt_0_1_0 arith_state_const_0_1 state_1_a_0)))
 (let ((?x155 (ite arith_sym_opt_0_1_0 arith_sym_const_0_1 (ite arith_sym_opt_0_1_1 sym_1_y sym_2_y))))
 (= arith_val_0_1_a_0_y_b (bvadd ?x155 ?x98)))))
(assert
 (= state_1_b_0 (ite logic_val_0_0_a_0_y_b arith_val_0_0_a_0_y_b arith_val_0_1_a_0_y_b)))
(assert
 (let ((?x46 (ite pred_state_opt_0_0_0 (_ bv0 8) state_1_a_0)))
 (let ((?x150 (ite pred_sym_opt_0_0_0 (_ bv0 8) (ite pred_sym_opt_0_0_1 sym_1_z sym_2_z))))
 (let ((?x152 (bvadd (bvadd ?x150 ?x46) pred_const_0_0)))
 (let (($x161 (ite pred_op_0_0_0 (ite pred_op_0_0_1 (= ?x152 (_ bv0 8)) (bvsge ?x152 (_ bv0 8))) (ite pred_op_0_0_1 (bvsle ?x152 (_ bv0 8)) (and (distinct ?x152 (_ bv0 8)) true)))))
 (= pred_val_0_0_a_0_z_c $x161))))))
(assert
 (let ((?x63 (ite pred_state_opt_0_1_0 (_ bv0 8) state_1_a_0)))
 (let ((?x163 (ite pred_sym_opt_0_1_0 (_ bv0 8) (ite pred_sym_opt_0_1_1 sym_1_z sym_2_z))))
 (let ((?x165 (bvadd (bvadd ?x163 ?x63) pred_const_0_1)))
 (let (($x172 (ite pred_op_0_1_0 (ite pred_op_0_1_1 (= ?x165 (_ bv0 8)) (bvsge ?x165 (_ bv0 8))) (ite pred_op_0_1_1 (bvsle ?x165 (_ bv0 8)) (and (distinct ?x165 (_ bv0 8)) true)))))
 (= pred_val_0_1_a_0_z_c $x172))))))
(assert
 (let (($x178 (ite logic_op_0_0_1 (and pred_val_0_0_a_0_z_c pred_val_0_1_a_0_z_c) (or pred_val_0_0_a_0_z_c pred_val_0_1_a_0_z_c))))
 (= logic_val_0_0_a_0_z_c (ite logic_op_0_0_0 pred_val_0_0_a_0_z_c $x178))))
(assert
 (let ((?x92 (ite arith_state_opt_0_0_0 arith_state_const_0_0 state_1_a_0)))
 (let ((?x184 (ite arith_sym_opt_0_0_0 arith_sym_const_0_0 (ite arith_sym_opt_0_0_1 sym_1_z sym_2_z))))
 (= arith_val_0_0_a_0_z_c (bvadd ?x184 ?x92)))))
(assert
 (let ((?x98 (ite arith_state_opt_0_1_0 arith_state_const_0_1 state_1_a_0)))
 (let ((?x199 (ite arith_sym_opt_0_1_0 arith_sym_const_0_1 (ite arith_sym_opt_0_1_1 sym_1_z sym_2_z))))
 (= arith_val_0_1_a_0_z_c (bvadd ?x199 ?x98)))))
(assert
 (= state_1_c_0 (ite logic_val_0_0_a_0_z_c arith_val_0_0_a_0_z_c arith_val_0_1_a_0_z_c)))
(assert
 (let ((?x193 (ite pred_state_opt_0_0_0 (_ bv0 8) state_1_b_0)))
 (let ((?x44 (ite pred_sym_opt_0_0_0 (_ bv0 8) (ite pred_sym_opt_0_0_1 sym_1_x sym_2_x))))
 (let ((?x195 (bvadd (bvadd ?x44 ?x193) pred_const_0_0)))
 (let (($x204 (ite pred_op_0_0_0 (ite pred_op_0_0_1 (= ?x195 (_ bv0 8)) (bvsge ?x195 (_ bv0 8))) (ite pred_op_0_0_1 (bvsle ?x195 (_ bv0 8)) (and (distinct ?x195 (_ bv0 8)) true)))))
 (= pred_val_0_0_b_0_x_a $x204))))))
(assert
 (let ((?x205 (ite pred_state_opt_0_1_0 (_ bv0 8) state_1_b_0)))
 (let ((?x61 (ite pred_sym_opt_0_1_0 (_ bv0 8) (ite pred_sym_opt_0_1_1 sym_1_x sym_2_x))))
 (let ((?x207 (bvadd (bvadd ?x61 ?x205) pred_const_0_1)))
 (let (($x214 (ite pred_op_0_1_0 (ite pred_op_0_1_1 (= ?x207 (_ bv0 8)) (bvsge ?x207 (_ bv0 8))) (ite pred_op_0_1_1 (bvsle ?x207 (_ bv0 8)) (and (distinct ?x207 (_ bv0 8)) true)))))
 (= pred_val_0_1_b_0_x_a $x214))))))
(assert
 (let (($x220 (ite logic_op_0_0_1 (and pred_val_0_0_b_0_x_a pred_val_0_1_b_0_x_a) (or pred_val_0_0_b_0_x_a pred_val_0_1_b_0_x_a))))
 (= logic_val_0_0_b_0_x_a (ite logic_op_0_0_0 pred_val_0_0_b_0_x_a $x220))))
(assert
 (let ((?x225 (ite arith_state_opt_0_0_0 arith_state_const_0_0 state_1_b_0)))
 (let ((?x90 (ite arith_sym_opt_0_0_0 arith_sym_const_0_0 (ite arith_sym_opt_0_0_1 sym_1_x sym_2_x))))
 (= arith_val_0_0_b_0_x_a (bvadd ?x90 ?x225)))))
(assert
 (let ((?x229 (ite arith_state_opt_0_1_0 arith_state_const_0_1 state_1_b_0)))
 (let ((?x95 (ite arith_sym_opt_0_1_0 arith_sym_const_0_1 (ite arith_sym_opt_0_1_1 sym_1_x sym_2_x))))
 (= arith_val_0_1_b_0_x_a (bvadd ?x95 ?x229)))))
(assert
 (= state_1_a_0 (ite logic_val_0_0_b_0_x_a arith_val_0_0_b_0_x_a arith_val_0_1_b_0_x_a)))
(assert
 (let ((?x193 (ite pred_state_opt_0_0_0 (_ bv0 8) state_1_b_0)))
 (let ((?x106 (ite pred_sym_opt_0_0_0 (_ bv0 8) (ite pred_sym_opt_0_0_1 sym_1_y sym_2_y))))
 (let ((?x234 (bvadd (bvadd ?x106 ?x193) pred_const_0_0)))
 (let (($x243 (ite pred_op_0_0_0 (ite pred_op_0_0_1 (= ?x234 (_ bv0 8)) (bvsge ?x234 (_ bv0 8))) (ite pred_op_0_0_1 (bvsle ?x234 (_ bv0 8)) (and (distinct ?x234 (_ bv0 8)) true)))))
 (= pred_val_0_0_b_0_y_b $x243))))))
(assert
 (let ((?x205 (ite pred_state_opt_0_1_0 (_ bv0 8) state_1_b_0)))
 (let ((?x119 (ite pred_sym_opt_0_1_0 (_ bv0 8) (ite pred_sym_opt_0_1_1 sym_1_y sym_2_y))))
 (let ((?x245 (bvadd (bvadd ?x119 ?x205) pred_const_0_1)))
 (let (($x252 (ite pred_op_0_1_0 (ite pred_op_0_1_1 (= ?x245 (_ bv0 8)) (bvsge ?x245 (_ bv0 8))) (ite pred_op_0_1_1 (bvsle ?x245 (_ bv0 8)) (and (distinct ?x245 (_ bv0 8)) true)))))
 (= pred_val_0_1_b_0_y_b $x252))))))
(assert
 (let (($x258 (ite logic_op_0_0_1 (and pred_val_0_0_b_0_y_b pred_val_0_1_b_0_y_b) (or pred_val_0_0_b_0_y_b pred_val_0_1_b_0_y_b))))
 (= logic_val_0_0_b_0_y_b (ite logic_op_0_0_0 pred_val_0_0_b_0_y_b $x258))))
(assert
 (let ((?x225 (ite arith_state_opt_0_0_0 arith_state_const_0_0 state_1_b_0)))
 (let ((?x140 (ite arith_sym_opt_0_0_0 arith_sym_const_0_0 (ite arith_sym_opt_0_0_1 sym_1_y sym_2_y))))
 (= arith_val_0_0_b_0_y_b (bvadd ?x140 ?x225)))))
(assert
 (let ((?x229 (ite arith_state_opt_0_1_0 arith_state_const_0_1 state_1_b_0)))
 (let ((?x155 (ite arith_sym_opt_0_1_0 arith_sym_const_0_1 (ite arith_sym_opt_0_1_1 sym_1_y sym_2_y))))
 (= arith_val_0_1_b_0_y_b (bvadd ?x155 ?x229)))))
(assert
 (= state_1_b_0 (ite logic_val_0_0_b_0_y_b arith_val_0_0_b_0_y_b arith_val_0_1_b_0_y_b)))
(assert
 (let ((?x193 (ite pred_state_opt_0_0_0 (_ bv0 8) state_1_b_0)))
 (let ((?x150 (ite pred_sym_opt_0_0_0 (_ bv0 8) (ite pred_sym_opt_0_0_1 sym_1_z sym_2_z))))
 (let ((?x270 (bvadd (bvadd ?x150 ?x193) pred_const_0_0)))
 (let (($x279 (ite pred_op_0_0_0 (ite pred_op_0_0_1 (= ?x270 (_ bv0 8)) (bvsge ?x270 (_ bv0 8))) (ite pred_op_0_0_1 (bvsle ?x270 (_ bv0 8)) (and (distinct ?x270 (_ bv0 8)) true)))))
 (= pred_val_0_0_b_0_z_c $x279))))))
(assert
 (let ((?x205 (ite pred_state_opt_0_1_0 (_ bv0 8) state_1_b_0)))
 (let ((?x163 (ite pred_sym_opt_0_1_0 (_ bv0 8) (ite pred_sym_opt_0_1_1 sym_1_z sym_2_z))))
 (let ((?x281 (bvadd (bvadd ?x163 ?x205) pred_const_0_1)))
 (let (($x288 (ite pred_op_0_1_0 (ite pred_op_0_1_1 (= ?x281 (_ bv0 8)) (bvsge ?x281 (_ bv0 8))) (ite pred_op_0_1_1 (bvsle ?x281 (_ bv0 8)) (and (distinct ?x281 (_ bv0 8)) true)))))
 (= pred_val_0_1_b_0_z_c $x288))))))
(assert
 (let (($x294 (ite logic_op_0_0_1 (and pred_val_0_0_b_0_z_c pred_val_0_1_b_0_z_c) (or pred_val_0_0_b_0_z_c pred_val_0_1_b_0_z_c))))
 (= logic_val_0_0_b_0_z_c (ite logic_op_0_0_0 pred_val_0_0_b_0_z_c $x294))))
(assert
 (let ((?x225 (ite arith_state_opt_0_0_0 arith_state_const_0_0 state_1_b_0)))
 (let ((?x184 (ite arith_sym_opt_0_0_0 arith_sym_const_0_0 (ite arith_sym_opt_0_0_1 sym_1_z sym_2_z))))
 (= arith_val_0_0_b_0_z_c (bvadd ?x184 ?x225)))))
(assert
 (let ((?x229 (ite arith_state_opt_0_1_0 arith_state_const_0_1 state_1_b_0)))
 (let ((?x199 (ite arith_sym_opt_0_1_0 arith_sym_const_0_1 (ite arith_sym_opt_0_1_1 sym_1_z sym_2_z))))
 (= arith_val_0_1_b_0_z_c (bvadd ?x199 ?x229)))))
(assert
 (= state_1_c_0 (ite logic_val_0_0_b_0_z_c arith_val_0_0_b_0_z_c arith_val_0_1_b_0_z_c)))
(assert
 (let ((?x305 (ite pred_state_opt_0_0_0 (_ bv0 8) state_1_c_0)))
 (let ((?x44 (ite pred_sym_opt_0_0_0 (_ bv0 8) (ite pred_sym_opt_0_0_1 sym_1_x sym_2_x))))
 (let ((?x307 (bvadd (bvadd ?x44 ?x305) pred_const_0_0)))
 (let (($x316 (ite pred_op_0_0_0 (ite pred_op_0_0_1 (= ?x307 (_ bv0 8)) (bvsge ?x307 (_ bv0 8))) (ite pred_op_0_0_1 (bvsle ?x307 (_ bv0 8)) (and (distinct ?x307 (_ bv0 8)) true)))))
 (= pred_val_0_0_c_0_x_a $x316))))))
(assert
 (let ((?x317 (ite pred_state_opt_0_1_0 (_ bv0 8) state_1_c_0)))
 (let ((?x61 (ite pred_sym_opt_0_1_0 (_ bv0 8) (ite pred_sym_opt_0_1_1 sym_1_x sym_2_x))))
 (let ((?x319 (bvadd (bvadd ?x61 ?x317) pred_const_0_1)))
 (let (($x326 (ite pred_op_0_1_0 (ite pred_op_0_1_1 (= ?x319 (_ bv0 8)) (bvsge ?x319 (_ bv0 8))) (ite pred_op_0_1_1 (bvsle ?x319 (_ bv0 8)) (and (distinct ?x319 (_ bv0 8)) true)))))
 (= pred_val_0_1_c_0_x_a $x326))))))
(assert
 (let (($x332 (ite logic_op_0_0_1 (and pred_val_0_0_c_0_x_a pred_val_0_1_c_0_x_a) (or pred_val_0_0_c_0_x_a pred_val_0_1_c_0_x_a))))
 (= logic_val_0_0_c_0_x_a (ite logic_op_0_0_0 pred_val_0_0_c_0_x_a $x332))))
(assert
 (let ((?x337 (ite arith_state_opt_0_0_0 arith_state_const_0_0 state_1_c_0)))
 (let ((?x90 (ite arith_sym_opt_0_0_0 arith_sym_const_0_0 (ite arith_sym_opt_0_0_1 sym_1_x sym_2_x))))
 (= arith_val_0_0_c_0_x_a (bvadd ?x90 ?x337)))))
(assert
 (let ((?x341 (ite arith_state_opt_0_1_0 arith_state_const_0_1 state_1_c_0)))
 (let ((?x95 (ite arith_sym_opt_0_1_0 arith_sym_const_0_1 (ite arith_sym_opt_0_1_1 sym_1_x sym_2_x))))
 (= arith_val_0_1_c_0_x_a (bvadd ?x95 ?x341)))))
(assert
 (let ((?x354 (ite logic_val_0_0_c_0_x_a arith_val_0_0_c_0_x_a arith_val_0_1_c_0_x_a)))
 (= state_1_a_0 ?x354)))
(assert
 (let ((?x305 (ite pred_state_opt_0_0_0 (_ bv0 8) state_1_c_0)))
 (let ((?x106 (ite pred_sym_opt_0_0_0 (_ bv0 8) (ite pred_sym_opt_0_0_1 sym_1_y sym_2_y))))
 (let ((?x346 (bvadd (bvadd ?x106 ?x305) pred_const_0_0)))
 (let (($x355 (ite pred_op_0_0_0 (ite pred_op_0_0_1 (= ?x346 (_ bv0 8)) (bvsge ?x346 (_ bv0 8))) (ite pred_op_0_0_1 (bvsle ?x346 (_ bv0 8)) (and (distinct ?x346 (_ bv0 8)) true)))))
 (= pred_val_0_0_c_0_y_b $x355))))))
(assert
 (let ((?x317 (ite pred_state_opt_0_1_0 (_ bv0 8) state_1_c_0)))
 (let ((?x119 (ite pred_sym_opt_0_1_0 (_ bv0 8) (ite pred_sym_opt_0_1_1 sym_1_y sym_2_y))))
 (let ((?x357 (bvadd (bvadd ?x119 ?x317) pred_const_0_1)))
 (let (($x364 (ite pred_op_0_1_0 (ite pred_op_0_1_1 (= ?x357 (_ bv0 8)) (bvsge ?x357 (_ bv0 8))) (ite pred_op_0_1_1 (bvsle ?x357 (_ bv0 8)) (and (distinct ?x357 (_ bv0 8)) true)))))
 (= pred_val_0_1_c_0_y_b $x364))))))
(assert
 (let (($x370 (ite logic_op_0_0_1 (and pred_val_0_0_c_0_y_b pred_val_0_1_c_0_y_b) (or pred_val_0_0_c_0_y_b pred_val_0_1_c_0_y_b))))
 (= logic_val_0_0_c_0_y_b (ite logic_op_0_0_0 pred_val_0_0_c_0_y_b $x370))))
(assert
 (let ((?x337 (ite arith_state_opt_0_0_0 arith_state_const_0_0 state_1_c_0)))
 (let ((?x140 (ite arith_sym_opt_0_0_0 arith_sym_const_0_0 (ite arith_sym_opt_0_0_1 sym_1_y sym_2_y))))
 (= arith_val_0_0_c_0_y_b (bvadd ?x140 ?x337)))))
(assert
 (let ((?x341 (ite arith_state_opt_0_1_0 arith_state_const_0_1 state_1_c_0)))
 (let ((?x155 (ite arith_sym_opt_0_1_0 arith_sym_const_0_1 (ite arith_sym_opt_0_1_1 sym_1_y sym_2_y))))
 (= arith_val_0_1_c_0_y_b (bvadd ?x155 ?x341)))))
(assert
 (let ((?x390 (ite logic_val_0_0_c_0_y_b arith_val_0_0_c_0_y_b arith_val_0_1_c_0_y_b)))
 (= state_1_b_0 ?x390)))
(assert
 (let ((?x305 (ite pred_state_opt_0_0_0 (_ bv0 8) state_1_c_0)))
 (let ((?x150 (ite pred_sym_opt_0_0_0 (_ bv0 8) (ite pred_sym_opt_0_0_1 sym_1_z sym_2_z))))
 (let ((?x382 (bvadd (bvadd ?x150 ?x305) pred_const_0_0)))
 (let (($x386 (and (distinct ?x382 (_ bv0 8)) true)))
 (let (($x385 (bvsle ?x382 (_ bv0 8))))
 (let (($x391 (ite pred_op_0_0_0 (ite pred_op_0_0_1 (= ?x382 (_ bv0 8)) (bvsge ?x382 (_ bv0 8))) (ite pred_op_0_0_1 $x385 $x386))))
 (= pred_val_0_0_c_0_z_c $x391))))))))
(assert
 (let ((?x317 (ite pred_state_opt_0_1_0 (_ bv0 8) state_1_c_0)))
 (let ((?x163 (ite pred_sym_opt_0_1_0 (_ bv0 8) (ite pred_sym_opt_0_1_1 sym_1_z sym_2_z))))
 (let ((?x393 (bvadd (bvadd ?x163 ?x317) pred_const_0_1)))
 (let (($x397 (and (distinct ?x393 (_ bv0 8)) true)))
 (let (($x396 (bvsle ?x393 (_ bv0 8))))
 (let (($x400 (ite pred_op_0_1_0 (ite pred_op_0_1_1 (= ?x393 (_ bv0 8)) (bvsge ?x393 (_ bv0 8))) (ite pred_op_0_1_1 $x396 $x397))))
 (= pred_val_0_1_c_0_z_c $x400))))))))
(assert
 (let (($x405 (or pred_val_0_0_c_0_z_c pred_val_0_1_c_0_z_c)))
 (let (($x404 (and pred_val_0_0_c_0_z_c pred_val_0_1_c_0_z_c)))
 (let (($x407 (ite logic_op_0_0_0 pred_val_0_0_c_0_z_c (ite logic_op_0_0_1 $x404 $x405))))
 (= logic_val_0_0_c_0_z_c $x407)))))
(assert
 (let ((?x337 (ite arith_state_opt_0_0_0 arith_state_const_0_0 state_1_c_0)))
 (let ((?x184 (ite arith_sym_opt_0_0_0 arith_sym_const_0_0 (ite arith_sym_opt_0_0_1 sym_1_z sym_2_z))))
 (let ((?x411 (bvadd ?x184 ?x337)))
 (= arith_val_0_0_c_0_z_c ?x411)))))
(assert
 (let ((?x341 (ite arith_state_opt_0_1_0 arith_state_const_0_1 state_1_c_0)))
 (let ((?x199 (ite arith_sym_opt_0_1_0 arith_sym_const_0_1 (ite arith_sym_opt_0_1_1 sym_1_z sym_2_z))))
 (let ((?x414 (bvadd ?x199 ?x341)))
 (= arith_val_0_1_c_0_z_c ?x414)))))
(assert
 (let ((?x426 (ite logic_val_0_0_c_0_z_c arith_val_0_0_c_0_z_c arith_val_0_1_c_0_z_c)))
 (= state_1_c_0 ?x426)))
(check-sat)
(exit)
